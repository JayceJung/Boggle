[{"D:\\dev\\boggle-react-app\\src\\index.js":"1","D:\\dev\\boggle-react-app\\src\\App.js":"2","D:\\dev\\boggle-react-app\\src\\reducers\\index.js":"3","D:\\dev\\boggle-react-app\\src\\components\\MainPage\\mainPage.js":"4","D:\\dev\\boggle-react-app\\src\\reducers\\words.js":"5","D:\\dev\\boggle-react-app\\src\\reducers\\gameStatus.js":"6","D:\\dev\\boggle-react-app\\src\\components\\TimerButton\\timerButton.js":"7","D:\\dev\\boggle-react-app\\src\\components\\RuleModal\\ruleModal.js":"8","D:\\dev\\boggle-react-app\\src\\components\\WordList\\wordList.js":"9","D:\\dev\\boggle-react-app\\src\\components\\Board\\board.js":"10","D:\\dev\\boggle-react-app\\src\\components\\WordList\\wordSearch.js":"11","D:\\dev\\boggle-react-app\\src\\components\\WordListItem\\wordListItem.js":"12","D:\\dev\\boggle-react-app\\src\\actions\\index.js":"13","D:\\dev\\boggle-react-app\\src\\components\\SecondPage\\secondPage.js":"14","D:\\dev\\boggle-react-app\\src\\reducers\\animationStart.js":"15"},{"size":471,"mtime":1609970070222,"results":"16","hashOfConfig":"17"},{"size":956,"mtime":1609975616243,"results":"18","hashOfConfig":"17"},{"size":366,"mtime":1609981237371,"results":"19","hashOfConfig":"17"},{"size":3019,"mtime":1609982083226,"results":"20","hashOfConfig":"17"},{"size":293,"mtime":1609980196177,"results":"21","hashOfConfig":"17"},{"size":398,"mtime":1609975616267,"results":"22","hashOfConfig":"17"},{"size":2611,"mtime":1609991887499,"results":"23","hashOfConfig":"17"},{"size":2459,"mtime":1609982519388,"results":"24","hashOfConfig":"17"},{"size":2906,"mtime":1609991593916,"results":"25","hashOfConfig":"17"},{"size":1337,"mtime":1609970070219,"results":"26","hashOfConfig":"17"},{"size":1949,"mtime":1609970070221,"results":"27","hashOfConfig":"17"},{"size":2726,"mtime":1609980196165,"results":"28","hashOfConfig":"17"},{"size":667,"mtime":1609981237370,"results":"29","hashOfConfig":"17"},{"size":2379,"mtime":1609981230788,"results":"30","hashOfConfig":"17"},{"size":245,"mtime":1609980883494,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"10nnsep",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"D:\\dev\\boggle-react-app\\src\\index.js",[],["70","71"],"D:\\dev\\boggle-react-app\\src\\App.js",["72"],"import MainPage from './components/MainPage/mainPage';\r\nimport './App.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport SecondPage from './components/SecondPage/secondPage';\r\nimport { useSelector } from 'react-redux';\r\nconst boggle = require('pf-boggle');\r\n\r\nfunction App() {\r\n    const [boggleArray, setBoggleArray] = useState(\r\n        boggle.generate(4, boggle.diceSets['classic4'])\r\n    );\r\n\r\n    const refreshBoard = () => {\r\n        setBoggleArray(boggle.generate(4, boggle.diceSets['classic4']));\r\n    };\r\n\r\n    const gameStatus = useSelector((state) => state.gameStatus);\r\n\r\n    return (\r\n        <div>\r\n            {gameStatus === 'done' ? (\r\n              <SecondPage boggleArray={boggleArray} />   \r\n            ) : (\r\n                <MainPage\r\n                    boggleArray={boggleArray}\r\n                    refreshBoard={refreshBoard}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","D:\\dev\\boggle-react-app\\src\\reducers\\index.js",[],"D:\\dev\\boggle-react-app\\src\\components\\MainPage\\mainPage.js",["73"],"import React, { useState } from 'react';\r\nimport Board from '../Board/board';\r\nimport RuleModal from '../RuleModal/ruleModal';\r\nimport Modal from 'react-modal';\r\nimport WordList from '../WordList/wordList';\r\nimport TimerButton from '../TimerButton/timerButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Grid, Row, Col } from 'react-flexbox-grid';\r\nimport redoLogo from '../../images/redo.png';\r\nimport './mainPage.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { initGame, resetWordsList, animationStatusChange } from '../../actions';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        width: '70%',\r\n        padding: '1% 3%',\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\nexport default function MainPage(props) {\r\n    const gameStatus = useSelector((state) => state.gameStatus);\r\n    const dispatch = useDispatch();\r\n    const [modalIsOpen, setIsOpen] = useState(false);\r\n\r\n    const openModal = () => {\r\n        setIsOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const resetBoard = () => {\r\n        if (gameStatus === 'started') {\r\n            dispatch(animationStatusChange());\r\n            dispatch(resetWordsList());\r\n            dispatch(initGame());\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div id=\"mainWrap\">\r\n            <Row id=\"title\" center=\"lg\">\r\n                <Col xs={3}></Col>\r\n                <Col xs={6}>BOGGLE</Col>\r\n                <Col xs={3} id=\"help\">\r\n                    <Button id=\"howToPlayButton\" onClick={openModal}>\r\n                        How to play\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <Modal\r\n                isOpen={modalIsOpen}\r\n                onRequestClose={closeModal}\r\n                style={customStyles}\r\n            >\r\n                <RuleModal />\r\n            </Modal>\r\n            <Row id=\"gameWrap\">\r\n                <Col xs={8}>\r\n                    <Board array={props.boggleArray} />\r\n                </Col>\r\n                <Col xs={3}>\r\n                    <WordList array={props.boggleArray} renderInput={true} />\r\n                </Col>\r\n                <Col xs={1}></Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={8}></Col>\r\n                <Col xs={2}>\r\n                    <div className=\"buttonWrap\">\r\n                        <TimerButton refreshBoard={props.refreshBoard} />\r\n                    </div>\r\n                </Col>\r\n                <Col xs={1}>\r\n                    <div\r\n                        className=\"newGameButtonWrap\"\r\n                        onClick={resetBoard}\r\n                        disable={gameStatus === 'init' ? true : false}\r\n                    >\r\n                        <img id=\"redoLogo\" src={redoLogo} alt=\"redo\" />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n","D:\\dev\\boggle-react-app\\src\\reducers\\words.js",[],"D:\\dev\\boggle-react-app\\src\\reducers\\gameStatus.js",[],"D:\\dev\\boggle-react-app\\src\\components\\TimerButton\\timerButton.js",["74","75","76","77","78","79","80"],"D:\\dev\\boggle-react-app\\src\\components\\RuleModal\\ruleModal.js",["81"],"import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { Grid, Row, Col } from 'react-flexbox-grid';\r\nimport './ruleModal.css';\r\n\r\nexport default function RuleModal() {\r\n    return (\r\n        <div>\r\n            <Row center=\"lg\">\r\n                <Col xs={3}></Col>\r\n                <Col xs={6} id=\"modalTitle\">\r\n                    How to Play\r\n                </Col>\r\n                <Col xs={3}></Col>\r\n            </Row>\r\n            <Row id=\"rule\">\r\n                - Search the letters for words of 3 or more letters\r\n                <br />\r\n                - Words can be formed from letters connecting horizontally,\r\n                vertically, or diagonally to the left, right or up-and-down\r\n                <br />\r\n                - No letter may be used more than once within a single word\r\n                <br />\r\n                - Any word (noun, verb, adjective, adverb, etc.), plural of,\r\n                form of, or tense is accepmodaltable\r\n                <br />- Proper nouns (Toronto, John, Japan) are not allowed\r\n                <br />- Points are gained/lost based on if a word is/isn't valid\r\n            </Row>\r\n            <Row center=\"lg\">\r\n                <Table id=\"pointTable\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"modalTable\"># of Letters</td>\r\n                            <td className=\"modalTable\">3</td>\r\n                            <td className=\"modalTable\">4</td>\r\n                            <td className=\"modalTable\">5</td>\r\n                            <td className=\"modalTable\">6</td>\r\n                            <td className=\"modalTable\">7</td>\r\n                            <td className=\"modalTable\">8 or more</td>\r\n                        </tr>\r\n                    </tbody>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"modalTable\">Points (+/-)</td>\r\n                            <td className=\"modalTable\">1</td>\r\n                            <td className=\"modalTable\">1</td>\r\n                            <td className=\"modalTable\">2</td>\r\n                            <td className=\"modalTable\">3</td>\r\n                            <td className=\"modalTable\">5</td>\r\n                            <td className=\"modalTable\">11</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n","D:\\dev\\boggle-react-app\\src\\components\\WordList\\wordList.js",["82"],"D:\\dev\\boggle-react-app\\src\\components\\Board\\board.js",["83"],"import React, { useState } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport './board.css';\r\n\r\nexport default function Board(props) {\r\n    console.log('Board Array: ', props.array);\r\n  return (\r\n    <Table responsive id=\"tableWrap\">\r\n      <tbody>\r\n        <tr>\r\n          <td className=\"table\">{props.array[0]}</td>\r\n          <td className=\"table\">{props.array[1]}</td>\r\n          <td className=\"table\">{props.array[2]}</td>\r\n          <td className=\"table\">{props.array[3]}</td>\r\n        </tr>\r\n      </tbody>\r\n      <tbody>\r\n        <tr>\r\n          <td className=\"table\">{props.array[4]}</td>\r\n          <td className=\"table\">{props.array[5]}</td>\r\n          <td className=\"table\">{props.array[6]}</td>\r\n          <td className=\"table\">{props.array[7]}</td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"table\">{props.array[8]}</td>\r\n          <td className=\"table\">{props.array[9]}</td>\r\n          <td className=\"table\">{props.array[10]}</td>\r\n          <td className=\"table\">{props.array[11]}</td>\r\n        </tr>\r\n        <tr>\r\n          <td className=\"table\">{props.array[12]}</td>\r\n          <td className=\"table\">{props.array[13]}</td>\r\n          <td className=\"table\">{props.array[14]}</td>\r\n          <td className=\"table\">{props.array[15]}</td>\r\n        </tr>\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\n","D:\\dev\\boggle-react-app\\src\\components\\WordList\\wordSearch.js",["84"],"const dfs = (boardLettersArray, i, j, count, word) => {\r\n    if (count === word.length) {\r\n        return true;\r\n    }\r\n\r\n    if (\r\n        i < 0 ||\r\n        i >= boardLettersArray.length ||\r\n        j < 0 ||\r\n        j >= boardLettersArray[i] ||\r\n        boardLettersArray[i][j] != word[count]\r\n    ) {\r\n        return false;\r\n    }\r\n\r\n    const savedTemp = boardLettersArray[i][j];\r\n    boardLettersArray[i][j] = ' ';\r\n    const found =\r\n        dfs(boardLettersArray, i - 1, j, count + 1, word) ||\r\n        dfs(boardLettersArray, i + 1, j, count + 1, word) ||\r\n        dfs(boardLettersArray, i, j - 1, count + 1, word) ||\r\n        dfs(boardLettersArray, i, j + 1, count + 1, word) ||\r\n        dfs(boardLettersArray, i - 1, j + 1, count + 1, word) ||\r\n        dfs(boardLettersArray, i - 1, j - 1, count + 1, word) ||\r\n        dfs(boardLettersArray, i + 1, j + 1, count + 1, word) ||\r\n        dfs(boardLettersArray, i + 1, j - 1, count + 1, word);\r\n    boardLettersArray[i][j] = savedTemp;\r\n    return found;\r\n};\r\n\r\nconst wordSearch = (word, boardLetters) => {\r\n    const charsArray = word.split('');\r\n\r\n    while (charsArray.includes('Q')) {\r\n        const qIndex = charsArray.indexOf('Q');\r\n        if (qIndex > -1 && charsArray[qIndex + 1] === 'U') {\r\n            charsArray[qIndex] = 'QU';\r\n            charsArray.splice(qIndex + 1, 1);\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    const boardLettersArray = [...boardLetters];\r\n    const newArray = [];\r\n\r\n    while (boardLettersArray.length > 0) {\r\n        newArray.push(boardLettersArray.splice(0, 4));\r\n    }\r\n\r\n    for (let i = 0; i < newArray.length; i++) {\r\n        for (let j = 0; j < newArray[i].length; j++) {\r\n            if (\r\n                newArray[i][j] === charsArray[0] &&\r\n                dfs(newArray, i, j, 0, charsArray)\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport default wordSearch;\r\n","D:\\dev\\boggle-react-app\\src\\components\\WordListItem\\wordListItem.js",["85","86"],"import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Grid, Row, Col } from 'react-flexbox-grid';\r\n\r\nexport default function WordListItem(props) {\r\n    const words = useSelector((state) => state.words);\r\n    let listItems;\r\n    let tally = 0;\r\n    if (props.answers) {\r\n        const boggleAnswer = props.answers.map((answer) => answer.word);\r\n        listItems = words.map((word) => {\r\n            let points;\r\n            if (boggleAnswer.includes(word)) {\r\n                if (word.length <= 4) {\r\n                    points = 1;\r\n                } else if (word.length === 5) {\r\n                    points = 2;\r\n                } else if (word.length === 6) {\r\n                    points = 3;\r\n                } else if (word.length === 7) {\r\n                    points = 5;\r\n                } else if (word.length >= 8) {\r\n                    points = 11;\r\n                }\r\n\r\n                tally += points;\r\n\r\n                return (\r\n                    <div>\r\n                        <Row>\r\n                            <Col xs={6}>\r\n                                <li className=\"answerInput\" key={word}>{word}</li>                     \r\n                            </Col>\r\n                            <Col xs={6}>\r\n                                <p className=\"answerPoints\">{points}</p>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                );\r\n            } else {\r\n                if (word.length <= 4) {\r\n                    points = -1;\r\n                } else if (word.length === 5) {\r\n                    points = -2;\r\n                } else if (word.length === 6) {\r\n                    points = -3;\r\n                } else if (word.length === 7) {\r\n                    points = -5;\r\n                } else if (word.length >= 8) {\r\n                    points = -11;\r\n                }\r\n\r\n                tally += points;\r\n\r\n                return (\r\n                    <div>\r\n                        <Row >\r\n                            <Col xs={6}>\r\n                                <li className=\"incorrect answerInput\" key={word}>{word}</li>                     \r\n                            </Col>\r\n                            <Col xs={6}>\r\n                                <p className=\"answerPoints\">{points}</p>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n    } else {\r\n        listItems = words.map((word) => <li key={word}>{word}</li>);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ul>{listItems}</ul>\r\n            {props.answers ? <p>score: {tally}</p> : null}\r\n        </div>\r\n    );\r\n}\r\n","D:\\dev\\boggle-react-app\\src\\actions\\index.js",[],"D:\\dev\\boggle-react-app\\src\\components\\SecondPage\\secondPage.js",["87"],"import React, {useState} from 'react';\r\nimport { Grid, Row, Col } from 'react-flexbox-grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Board from '../Board/board';\r\nimport WordList from '../WordList/wordList';\r\nimport Modal from 'react-modal';\r\nimport { useDispatch } from 'react-redux';\r\nimport { initGame, resetWordsList } from '../../actions';\r\n\r\nimport './secondPage.css';\r\nconst boggle = require('pf-boggle');\r\nconst customStyles = {\r\n    content: {\r\n        width: '70%',\r\n        padding: '1% 3%',\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\nexport default function SecondPage(props) {\r\n    const [modalIsOpen, setIsOpen] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const openModal = () => {\r\n        setIsOpen(true);\r\n    };\r\n    \r\n    const closeModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const newGame = () => {\r\n        dispatch(resetWordsList());\r\n        dispatch(initGame());\r\n    };\r\n\r\n    const allAnswer = boggle.solve(props.boggleArray);\r\n    const boggleAnswer = allAnswer.filter((words) => words.word.length > 2);\r\n\r\n    return (\r\n        <div id=\"mainWrap\">\r\n            <Row id=\"title\" center=\"lg\">\r\n                <Col xs={3}></Col>\r\n                <Col xs={6}>BOGGLE</Col>\r\n                <Col xs={3} id=\"newGame\">\r\n                    <Button id=\"newGameButton\" onClick={newGame}>\r\n                        New Game\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <Row id=\"answers\" center=\"lg\">\r\n                <Col xs={3}>\r\n                    <WordList\r\n                        array={props.boggleArray}\r\n                        answers={boggleAnswer}\r\n                        renderInput={false}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Modal\r\n                isOpen={modalIsOpen}\r\n                onRequestClose={closeModal}\r\n                style={customStyles}\r\n            >\r\n                <Board array={props.boggleArray} />\r\n            </Modal>\r\n            <Row id=\"answers\" center=\"lg\">\r\n                <Col xs={4}>\r\n                    <Button id=\"viewBoard\" onClick={openModal}>ViewBoard</Button>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n","D:\\dev\\boggle-react-app\\src\\reducers\\animationStart.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":3,"column":17,"nodeType":"94","messageId":"95","endLine":3,"endColumn":26},{"ruleId":"92","severity":1,"message":"96","line":8,"column":10,"nodeType":"94","messageId":"95","endLine":8,"endColumn":14},{"ruleId":"97","severity":1,"message":"98","line":21,"column":24,"nodeType":"99","messageId":"100","endLine":21,"endColumn":26},{"ruleId":"97","severity":1,"message":"98","line":23,"column":31,"nodeType":"99","messageId":"100","endLine":23,"endColumn":33},{"ruleId":"97","severity":1,"message":"98","line":25,"column":31,"nodeType":"99","messageId":"100","endLine":25,"endColumn":33},{"ruleId":"97","severity":1,"message":"98","line":27,"column":31,"nodeType":"99","messageId":"100","endLine":27,"endColumn":33},{"ruleId":"97","severity":1,"message":"98","line":41,"column":20,"nodeType":"99","messageId":"100","endLine":41,"endColumn":22},{"ruleId":"97","severity":1,"message":"101","line":52,"column":40,"nodeType":"99","messageId":"100","endLine":52,"endColumn":42},{"ruleId":"97","severity":1,"message":"98","line":62,"column":52,"nodeType":"99","messageId":"100","endLine":62,"endColumn":54},{"ruleId":"92","severity":1,"message":"96","line":3,"column":10,"nodeType":"94","messageId":"95","endLine":3,"endColumn":14},{"ruleId":"97","severity":1,"message":"101","line":39,"column":24,"nodeType":"99","messageId":"100","endLine":39,"endColumn":26},{"ruleId":"92","severity":1,"message":"102","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":25},{"ruleId":"97","severity":1,"message":"101","line":11,"column":33,"nodeType":"99","messageId":"100","endLine":11,"endColumn":35},{"ruleId":"92","severity":1,"message":"102","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":25},{"ruleId":"92","severity":1,"message":"96","line":3,"column":10,"nodeType":"94","messageId":"95","endLine":3,"endColumn":14},{"ruleId":"92","severity":1,"message":"96","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":14},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Grid' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]